pipeline {
    agent {label 'jnlp-agent-docker'}
    
    environment {
        DOCKER_STACK_NAME = 'zabbix' 
        DOCKER_COMPOSE_DIR = 'docker-zabbix' // Path to docker-compose.yml
        DOCKER_SWARM_MANAGER_IP = '192.168.150.58'
        DOCKER_SWARM_MANAGER_PORT ='2376'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'master',
                url: 'https://github.com/nazmang/docker.git'
            }
        }
        stage('Create Files') {
            when {
                changeset "**/${env.DOCKER_COMPOSE_DIR}/**"
            }
            steps {
                script {
                    def composeDir = "${env.WORKSPACE}/${env.DOCKER_COMPOSE_DIR}"
                    // Create .POSTGRES_USER and .POSTGRES_PASSWORD files in DOCKER_COMPOSE_DIR
                    writeFile file: "${composeDir}/.POSTGRES_USER", text: env.POSTGRES_USER
                    writeFile file: "${composeDir}/.POSTGRES_PASSWORD", text: env.POSTGRES_PASSWORD

                    // Create start.env file with parameters in DOCKER_COMPOSE_DIR
                    def startEnv = """
                    POSTGRES_DB=${params.POSTGRES_DB}
                    POSTGRES_USER_FILE=/run/secrets/POSTGRES_USER
                    POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD
                    DB_SERVER_HOST=${params.POSTGRES_HOST}
                    DB_SERVER_PORT=5432
                    ZBX_SERVER_HOST=zabbix-server
                    ZBX_STARTVMWARECOLLECTORS=1
                    PHP_TZ=Europe/Kiev
                    PGUSER=${params.POSTGRES_USER}
                    PGHOST=${params.POSTGRES_HOST}
                    PGPORT=5432
                    DATA_SOURCE_URI=${params.POSTGRES_HOST}?sslmode=disable
                    """
                    writeFile file: "${composeDir}/start.env", text: startEnv
                }
            }
        }
        stage('Deploy stack'){    
            when {
                changeset "**/${env.DOCKER_COMPOSE_DIR}/**"
            }        
            steps {                
                script {
                    def composeFile = "docker-compose.yml"
                   
                    // Check if EXTERNAL_POSTGRES is 'true' and adjust compose file accordingly
                    if (params.EXTERNAL_POSTGRES.toBoolean() == true) {
                        composeFile = "docker-compose-nopsql.yml"                        
                    }

                    dir("${env.DOCKER_COMPOSE_DIR}") {
                        sh  """
                                CONF_VERSION=${BUILD_NUMBER} docker -H tcp://${DOCKER_SWARM_MANAGER_IP}:${DOCKER_SWARM_MANAGER_PORT} \
                                stack deploy -c ${composeFile} ${env.DOCKER_STACK_NAME}
                            """ 
                    }
                }
            }
        }
        
    }
    post {
        always { 
            cleanWs()
        }
        success {
            // Cleanup orphaned secrets
            sh  """
                    docker secret ls --format '{{.Name}}'  \
                    | awk '/^POSTGRES_/ && !/^(POSTGRES_PASSWORD_v${BUILD_NUMBER}|POSTGRES_USER_v${BUILD_NUMBER})\$/{print}' \
                    | xargs -I {} docker secret rm {} || true
                """
        }
    }
}