pipeline {
    agent {label 'cloud && hetzner'}
    
    environment {
        DOCKER_STACK_NAME = 'zabbix' 
        DOCKER_COMPOSE_DIR = 'docker-zabbix' // Path to stack files
        DOCKER_CONTEXT='default' 
        // Telegram configre
        TELEGRAM_BOT_TOKEN = credentials('telegramToken')
        TELEGRAM_CHAT_ID = credentials('telegramChatid')   
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'master',
                url: 'https://github.com/nazmang/docker.git'
            }
        }

        // stage('Check Changes in DOCKER_COMPOSE_DIR') {
        //     steps {
        //         script {
        //             // Initial checkout 
        //             def scmVars = checkout([
        //                 $class: 'GitSCM',
        //                 branches: [[name: '*/master']],
        //                 userRemoteConfigs: [[url: 'https://github.com/nazmang/docker.git']],
        //                 extensions: [
        //                     [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: "${env.DOCKER_COMPOSE_DIR}/"]]]
        //                 ]
        //             ])

        //             // Recieve last and previous commits info 
        //             def currentCommit = scmVars.GIT_COMMIT
        //             def previousCommit = scmVars.GIT_PREVIOUS_SUCCESSFUL_COMMIT ?: 'HEAD^'

        //             // Check changes between commits 
        //             def changedFiles = sh(script: "git diff --name-only ${previousCommit} ${currentCommit}", returnStdout: true).trim().split('\n')
        //             def relevantChanges = changedFiles.any { it.startsWith("${env.DOCKER_COMPOSE_DIR}/") }

        //             if (!relevantChanges) {
        //                 echo "No changes detected in ${env.DOCKER_COMPOSE_DIR}. Aborting pipeline."
        //                 currentBuild.result = 'ABORTED'
        //                 error("No relevant changes detected")
        //             } else {
        //                 echo "Changes detected in ${env.DOCKER_COMPOSE_DIR}. Proceeding with pipeline."
        //             }
        //         }
        //     }
        // }

        stage('Create Files') {
            when {
                changeset "**/${env.DOCKER_COMPOSE_DIR}/**"
            }
            steps {
                script {
                    def composeDir = "${env.WORKSPACE}/${env.DOCKER_COMPOSE_DIR}"
                    // Create .POSTGRES_USER and .POSTGRES_PASSWORD files in DOCKER_COMPOSE_DIR
                    writeFile file: "${composeDir}/.POSTGRES_USER", text: env.POSTGRES_USER
                    writeFile file: "${composeDir}/.POSTGRES_PASSWORD", text: env.POSTGRES_PASSWORD

                    // Create start.env file with parameters in DOCKER_COMPOSE_DIR
                    def startEnv = """
                    POSTGRES_DB=${params.POSTGRES_DB}
                    POSTGRES_USER_FILE=/run/secrets/POSTGRES_USER
                    POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_PASSWORD
                    DB_SERVER_HOST=${params.POSTGRES_HOST}
                    DB_SERVER_PORT=5432
                    ZBX_SERVER_HOST=zabbix-server
                    ZBX_STARTVMWARECOLLECTORS=1
                    PHP_TZ=Europe/Kiev
                    PGUSER=${params.POSTGRES_USER}
                    PGHOST=${params.POSTGRES_HOST}
                    PGPORT=5432
                    DATA_SOURCE_URI=${params.POSTGRES_HOST}?sslmode=disable
                    """
                    writeFile file: "${composeDir}/start.env", text: startEnv
                }
            }
        }
        stage('Deploy stack'){    
            when {
                changeset "**/${env.DOCKER_COMPOSE_DIR}/**"
            }        
            steps {                
                script {
                    def composeFile = "docker-compose.yml"
                   
                    // Check if EXTERNAL_POSTGRES is 'true' and adjust compose file accordingly
                    if (params.EXTERNAL_POSTGRES.toBoolean() == true) {
                        composeFile = "docker-compose-nopsql.yml"                        
                    }

                    dir("${env.DOCKER_COMPOSE_DIR}") {
                        sh  """
                                docker context use ${env.DOCKER_CONTEXT}
                                CONF_VERSION=${BUILD_NUMBER} docker stack deploy -c ${composeFile} ${env.DOCKER_STACK_NAME}
                            """ 
                    }
                }
            }
        }
        
    }
    post {
        always { 
            cleanWs()
        }
        success {
            script{
                // Cleanup orphaned secrets
                sh  """
                    docker secret ls --format '{{.Name}}'  \
                    | awk '/^POSTGRES_/ && !/^(POSTGRES_PASSWORD_v${BUILD_NUMBER}|POSTGRES_USER_v${BUILD_NUMBER})\$/{print}' \
                    | xargs -I {} docker secret rm {} || true
                """
                
                def message = "✅ *Jenkins Deploy Success*\\n" +
                          "Job: ${env.JOB_NAME.replaceAll('-', '\\\\-')}\\n" +  // Экранируем '-'
                          "Build: #${env.BUILD_NUMBER}\\n" +
                          "Stack: ${env.DOCKER_STACK_NAME}\\n" +
                          "URL: ${env.BUILD_URL.replaceAll('-', '\\\\-')}"     // Экранируем '-' в URL
                sh """
                    curl -s -X POST https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendMessage \
                    -d chat_id=${env.TELEGRAM_CHAT_ID} \
                    -d text="${message}" \
                    -d parse_mode=MarkdownV2
                """
            }
        }
        failure {
            script {
                def message = "❌ *Jenkins Deploy Failed*\\n" +
                            "Job: ${env.JOB_NAME.replaceAll('-', '\\\\-')}\\n" +
                            "Build: #${env.BUILD_NUMBER}\\n" +
                            "Stack: ${env.DOCKER_STACK_NAME}\\n" +
                            "URL: ${env.BUILD_URL.replaceAll('-', '\\\\-')}"
                sh """
                    curl -s -X POST https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendMessage \
                    -d chat_id=${env.TELEGRAM_CHAT_ID} \
                    -d text="${message}" \
                    -d parse_mode=MarkdownV2
                """
            }
        }
    }
}