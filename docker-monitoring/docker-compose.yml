version: "3.1"

services:
  grafana:
    image: grafana/grafana:10.3.5
    ports:
      - 3000:3000
    volumes:
      - grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      placement:
        constraints:
          - "node.role==worker"
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:v1.7.0
    environment:
      - NODE_ID={{.Node.ID}}
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
      - "--no-collector.ipvs"
    networks:
      - monitor-net
    ports:
      - 9100:9100
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: nazman/cadvisor:v0.49.1
    command: --logtostderr=true
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitor-net
    ports:
      - 8080:8080
    labels:
      org.label-schema.group: "monitoring"

  prometheus:
    image: prom/prometheus:v2.53.4
    container_name: prometheus
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.role==manager"
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1.5G
    volumes:
      - prometheus_config:/etc/prometheus
      - prometheus_data:/prometheus
    user: 65534:999
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=2d"
      - "--web.enable-lifecycle"
      - "--enable-feature=memory-snapshot-on-shutdown"
    ports:
      - 9090:9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    deploy:
      placement:
        constraints:
          - "node.role==manager"
    environment:
      - CONTAINERS=1 # Allow access to viewing containers
      - SERVICES=1 # Allow access to viewing services (necessary when using Docker Swarm)
      - TASKS=1 # Allow access to viewing tasks (necessary when using Docker Swarm)
      - NODES=1 # Allow access to viewing nodes (necessary when using Docker Swarm)
      - POST=0 # Disallow any POST operations (effectively read-only)
      - SWARM=1
      - NETWORKS=1
      - VOLUMES=1
    ports:
      - 127.0.0.1:2375:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    restart: unless-stopped
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: quay.io/prometheus/alertmanager:v0.26.0
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    volumes:
      - alertmanager:/etc/alertmanager
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    environment:
      - SLACK_URL=${SLACK_URL:-https://hooks.slack.com/services/TOKEN}
      - SLACK_CHANNEL=${SLACK_CHANNEL:-general}
      - SLACK_USER=${SLACK_USER:-alertmanager}
    ports:
      - 9093:9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

networks:
  monitor-net:

volumes:
  prometheus_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/data/prometheus_data"
  prometheus_config:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/data/prometheus_config"
  influx_db:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/data/influx_db"
  grafana:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/data/grafana"
  alertmanager:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "/data/alertmanager"
