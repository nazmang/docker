@Library('jenkins-telegram-notify') _

def deployExecuted = false

pipeline {
    agent { label 'swarm && local' } // Ensure the agent has Docker and Swarm mode enabled
    
    environment {
        // Define environment variables for the stack
        DOCKER_STACK_NAME = 'monitoring'
        DOCKER_COMPOSE_DIR = 'docker-monitoring' // Path to docker-compose.yml
        DOCKER_COMPOSE_FILE = 'docker-compose.yml' // Name of your Docker Compose file
        GF_SECURITY_ADMIN_USER = "${params.GF_ADMIN_USER}" // Default admin user for Grafana
        GF_SECURITY_ADMIN_PASSWORD = "${params.GF_ADMIN_PASSWORD}" // Default admin password for Grafana
        GRAFANA_TAG=10.3.5
        PROM_TAG=v2.53.4
        ALERTMGR_TAG=v0.26.0
        // SLACK_URL = 'https://hooks.slack.com/services/TOKEN' // Slack webhook URL for Alertmanager
        // SLACK_CHANNEL = 'general' // Slack channel for alerts
        // SLACK_USER = 'alertmanager' // Slack username for alerts
    }

    stages {

        stage('Create Files') {
             when {
                changeset "**/${env.DOCKER_COMPOSE_DIR}/**"
             }
            steps {
                script {
                    def composeDir = "${env.WORKSPACE}/${env.DOCKER_COMPOSE_DIR}"
                    def envContent = """
                    GF_SECURITY_ADMIN_USER=${env.ADMIN_USER}
                    GF_SECURITY_ADMIN_PASSWORD=${env.ADMIN_PASSWORD}
                    # SLACK_URL=${env.SLACK_URL}
                    # SLACK_CHANNEL=${env.SLACK_CHANNEL}
                    # SLACK_USER=${env.SLACK_USER}
                    GRAFANA_TAG=10.3.5
                    PROM_TAG=v2.53.4
                    ALERTMGR_TAG=v0.26.0
                    """
                    echo "Generated .env content:\n${envContent}"
                    writeFile file: "${composeDir}/.env", text: envContent
                }
            }
        }

        stage('Deploy Monitoring Stack') {
             when {
                changeset "**/${env.DOCKER_COMPOSE_DIR}/**"
             }
            steps {                
                script {
                    dir("${env.DOCKER_COMPOSE_DIR}"){
                        // Deploy the stack using docker stack deploy
                        sh "make -f Makefile -e deploy-all STACK_NAME=${env.DOCKER_STACK_NAME}"                    
                    }
                    deployExecuted = true
                }
            }
        }
    }

    post {
        success {
            script {
                if (deployExecuted) {
                    def message = "✅ *Monitoring Deploy Success*\n" +
                                  "Job: ${env.JOB_NAME}\n" +
                                  "Build: #${env.BUILD_NUMBER}\n" +
                                  "Stack: ${env.DOCKER_STACK_NAME}\n" +
                                  "URL: ${env.BUILD_URL}"
                    telegram.sendMessage(env.TELEGRAM_BOT_TOKEN, env.TELEGRAM_CHAT_ID, message)
                } else {
                    echo "Deploy stack was not executed, skipping Telegram notification."
                }
            }
        }
        failure {
            script {
                def message = "❌ *Monitoring Deploy Failed*\n" +
                              "Job: ${env.JOB_NAME}\n" +
                              "Build: #${env.BUILD_NUMBER}\n" +
                              "Stack: ${env.DOCKER_STACK_NAME}\n" +
                              "URL: ${env.BUILD_URL}"
                telegram.sendMessage(env.TELEGRAM_BOT_TOKEN, env.TELEGRAM_CHAT_ID, message)
            }
        }
        always {
            cleanWs()
        }
    }
}