def deployExecuted = false // Flag indicates when stack deploy is successful

pipeline {
    agent { label 'cloud && hetzner'  }

    environment {    
        DOCKER_COMPOSE_DIR = 'docker-jenkins'
        DOCKER_STACK_NAME = 'jenkins'
        ETCD_DATA_PATH = '/data/etcd_data'
        JENKINS_AGENT_TAG = 'latest-jdk21'
        JENKINS_HOME_PATH = '/data/jenkins_home/jenkins_local'
        JENKINS_SECRET = credentials('JENKINS_AGENT_SECRET')
        JENKINS_TAG = 'latest-jdk21'        
        // Telegram configre
        TELEGRAM_BOT_TOKEN = credentials('telegramToken')
        TELEGRAM_CHAT_ID = credentials('telegramChatid')             
    }
   
    stages {        
        stage('Create Files') {
            when {
                changeset "**/${env.DOCKER_COMPOSE_DIR}/**"
            }
            steps {
                script {
                    def composeDir = "${env.WORKSPACE}/${env.DOCKER_COMPOSE_DIR}"
                    writeFile file: "${composeDir}/secret-file", text: env.JENKINS_SECRET

                    def safeTunnelToken = env.TUNNEL_TOKEN.replaceAll('\n', '\\\\n').replaceAll(':', '\\:')
                    def envContent = """                    
                    ETCD_DATA_PATH=${env.ETCD_DATA_PATH}
                    JENKINS_HOME_PATH=${env.JENKINS_HOME_PATH}
                    JENKINS_AGENT_TAG=${env.JENKINS_AGENT_TAG}
                    JENKINS_TAG=${env.JENKINS_TAG}                    
                    """
                    echo "Generated .env content:\n${envContent}"
                    writeFile file: "${composeDir}/.env", text: envContent
                }
            }
        }

        stage('Deploy stack') {
            when {
                changeset "**/${env.DOCKER_COMPOSE_DIR}/**"
            }
            steps {
                script {
                    dir("${env.DOCKER_COMPOSE_DIR}") {
                        sh "make -f Makefile -e deploy-all STACK_NAME=${env.DOCKER_STACK_NAME}"
                        env.DEPLOY_EXECUTED = 'true'
                    }
                    deployExecuted = true
                    echo "Deploy executed: ${deployExecuted}"
                }                
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            script{                            
                if (deployExecuted) {
                    def message = "✅ <b>Jenkins Deploy Success</b>\n" +
                                  "Job: ${env.JOB_NAME}\n" +
                                  "Build: #${env.BUILD_NUMBER}\n" +
                                  "Stack: ${env.DOCKER_STACK_NAME}\n" +
                                  "URL: ${env.BUILD_URL}"
                    sh """
                        curl -s -X POST https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendMessage \
                        -d chat_id=${env.TELEGRAM_CHAT_ID} \
                        -d text="${message}" \
                        -d parse_mode=HTML
                    """
                } else {
                    echo "Deploy stack was not executed, skipping Telegram notification."
                }
            }
        }
        failure {
            script {
                def message = "<b>❌ Jenkins Deploy Failed</b>\n" +
                          "Job: ${env.JOB_NAME}\n" +
                          "Build: #${env.BUILD_NUMBER}\n" +
                          "Stack: ${env.DOCKER_STACK_NAME}\n" +
                          "URL: <a href='${env.BUILD_URL}'>Link</a>"
                sh """
                    curl -s -X POST https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendMessage \
                    -d chat_id=${env.TELEGRAM_CHAT_ID} \
                    -d text="${message}" \
                    -d parse_mode=HTML
                """
            }
        }
    }
}