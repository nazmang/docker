pipeline {
    agent {label 'jnlp-agent-docker'}
    
    environment {
        DOCKER_STACK_NAME = 'jenkins' 
        DOCKER_COMPOSE_DIR = 'docker-jenkins' // Path to docker-compose.yml
        DOCKER_SWARM_MANAGER_IP = '192.168.150.58'
        DOCKER_SWARM_MANAGER_PORT = '2376'
        VIRTUAL_HOST='your-domain.com'
        VIRTUAL_PORT=8080 
        LETSENCRYPT_HOST='your-domain.com'
        LETSENCRYPT_EMAIL="your@email.com"        
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'master',
                url: 'https://github.com/nazmang/docker.git'
            }
            
        }
        stage('Create Files') {
            steps {
                script {
                    def composeDir = "${env.WORKSPACE}/${env.DOCKER_COMPOSE_DIR}"
                    // Create secret file
                    writeFile file: "${composeDir}/secret-file", text: env.JENKINS_SECRET
                   
                    // Create .env file with parameters in DOCKER_COMPOSE_DIR
                    def startEnv = """
                    VIRTUAL_HOST=${env.VIRTUAL_HOST}
                    LETSENCRYPT_HOST=${env.LETSENCRYPT_HOST}
                    LETSENCRYPT_EMAIL=${env.LETSENCRYPT_EMAIL}
                    VIRTUAL_PORT=${env.VIRTUAL_PORT} 
                    """
                    writeFile file: "${composeDir}/.env", text: startEnv
                }
            }
        }
        stage('Deploy stack'){            
            steps {                
                script {
                    
                    dir("${env.DOCKER_COMPOSE_DIR}") {
                        sh "docker service rm ${env.DOCKER_STACK_NAME}_jenkins-agent"
                        sh "docker secret rm ${env.DOCKER_STACK_NAME}_jenkins_secret"
                        sh "docker -H tcp://${DOCKER_SWARM_MANAGER_IP}:${DOCKER_SWARM_MANAGER_PORT} stack deploy -c docker-compose.yml ${env.DOCKER_STACK_NAME}" 
                    }
                }
            }
        }
        
    }
    post {
        always { 
            cleanWs()
        }
      //  success {}
      //  failure {}
      //  unstable{}
    }
}
